plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.8.21'
//    id 'org.jetbrains.kotlin.multiplatform' version '1.8.10'
    id 'java'

    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.21'

}

group 'org.prisms.tank'
version '0.0.1'

repositories {
    mavenCentral()
    mavenCentral()
    mavenLocal()
    maven{ url 'https://maven.aliyun.com/repository/google/'}
    maven{ url 'https://maven.aliyun.com/repository/jcenter/'}
    maven{ url 'https://oss.sonatype.org/content/repositories/snapshots'}
}



dependencies {
    def ktor_version = "2.3.1"
    def logback_version = "1.4.8"
    def kotlin_version = "1.8.21"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.2")
    implementation 'junit:junit:4.13.1'
    implementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.jetbrains.kotlin:kotlin-test:$kotlin_version'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    // define any required OkHttp artifacts without version
    // define ktor_version

    implementation("io.ktor:ktor-server-core:$ktor_version")
    implementation("io.ktor:ktor-server-netty:$ktor_version")
    implementation("io.ktor:ktor-server-websockets:$ktor_version")
    testImplementation("io.ktor:ktor-server-test-host:$ktor_version")
    implementation("ch.qos.logback:logback-classic:$logback_version")
    testImplementation("io.ktor:ktor-server-test-host:$ktor_version")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version")

    implementation('com.esotericsoftware:kryo:5.5.0')
}

test {
    useJUnitPlatform()
}
jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}